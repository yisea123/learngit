/*
*********************************************************************************************************
*                                                ADT-6861、AMC1600E
*                                           The Motion Controler
*
*                                 (c) Copyright 2002-2015, ADTECH, Shenzhen,
*                                           All Rights Reserved
*
*
* By      : ADTECH R&D 
* Remark  :
*********************************************************************************************************
*/

#ifndef		_ADT_MOTION_PULSE_H__
#define		_ADT_MOTION_PULSE_H__

/******************************错误码：Lib库报错******************************/
#define 	ERR_NONE					0			// 成功
#define 	ERR_PARAMETER				1			// 参数错误
#define		ERR_SEM_CREATE				2			// 信号量创建错误
#define 	ERR_ARC_AXIS_MAP			3			// 圆弧轴选位错误
#define 	ERR_ARC_NO_EXIST			4			// 圆弧不存在
#define 	ERR_RESPONSE_TIMEOUT		5			// 运动库响应超时
#define 	ERR_ARC_PARALLEL			6			// 圆弧上的点平行
#define		ERR_AXIS_MAP_CONFLICT		7			// 轴映射冲突引起错误
#define		ERR_ARCBLEND_INPUT_SEG		8			// 非相连曲线段(圆弧过渡处理)
#define		ERR_ARCBLEND_INPUT_PARA		9			// 过渡精度或者参数阈值要求过高(圆弧过渡处理)
#define		ERR_ARCBLEND_INCOPLANARITY	10			// 存在一条圆弧段时输入曲线不共面(圆弧过渡处理)
#define		ERR_ARCBLEND_INPUT_ANGLE	11			// 输入曲线夹角超出设定阈值范围(圆弧过渡处理)
#define		ERR_ARCBLEND_TOO_SHORT		12			// 输入曲线长度太小(圆弧过渡处理)
#define		ERR_ARCBLEND_OUTPUT_SEG		13			// 过渡后, 原线段的长度小于min_len(圆弧过渡处理)
#define		ERR_ARCBLEND_BLENDARC_R		14			// 过渡后, 圆半径过大或者圆半径小于min_R(圆弧过渡处理)
#define		ERR_ARCBLEND_BLENDARC_len	15			// 过渡后, 过渡圆弧长小于min_len(圆弧过渡处理)
#define		ERR_ARCBLEND_EXECUTE_FAIL	16			// 求解过渡圆过程中无解(圆弧过渡处理)
#define		ERR_ARCBLEND_INCOP_ARCARC	17			// 存在两条圆弧段时输入曲线不共面(圆弧过渡处理)


/******************************错误码：Motion库报错***************************/
#define 	_ERR_NONE					0			// 成功
#define 	_ERR_PARAMETER				101			// 参数错误
#define 	_ERR_DATA_SIZE				102			// 通信数据量异常
#define		_ERR_AXIS_STOP				103			// 对应轴处于停止状态
#define		_ERR_MOTION_CONFLICT		104			// 运动冲突
#define		_ERR_PARA_SET_FORBIT		105			// 当前状态不允许修改参数
#define		_ERR_DATA_MODE				106			// 输入数据模式错误
#define		_ERR_ADMODE					107			// 加减速模式设置错误
#define		_ERR_S_SPEED_CALC			108			// S型速度规划时计算错误
#define		_ERR_EMERGENCY		 		109			// 外部紧急停止信号生效中
#define		_ERR_MOTION_DATA			110			// 底层运动目标位置数据异常
#define		_ERR_CMD_NULL		 		111			// 空指令或无效指令
#define		_ERR_FPGA_WR				112			// FPGA读写测试错误
#define		_ERR_INP_FIFO_FULL			113			// 插补运动指令缓冲区已满
#define		_ERR_PTP_FIFO_FULL			114			// 点位运动指令缓冲区已满
#define		_ERR_POS_INCONSISTENT		115			// 恢复倍率时存在位置偏差
#define		_ERR_FIRMWARE_NOT_SUPPORT	116			// 当前固件不支持
#define		_ERR_AXIS_TYPE				117			// 轴类型错误
#define		_ERR_EtherCAT_CONNECT		118			// 总线通信故障
#define 	_ERR_AXIS_ALARM				119			// 轴报警
#define		_ERR_MAILBOX_WR				120			// 邮箱命令通信错误
#define		_ERR_RIGID_TAPPING			121			// 刚性攻丝过程中跟随误差过大
#define		_ERR_FIFO_EVENT				122			// 缓存事件未触发或处理异常
#define		_ERR_FPGA_BUS				123			// FPGA总线读写异常
#define		_ERR_RIGID_TAPPING_TIMEOUT	124			// 刚性攻丝超时未完成


/******************************轴号定义******************************/
#define		AXIS_1					1			// 第1轴轴号
#define		AXIS_2					2			// 第2轴轴号
#define		AXIS_3					3			// 第3轴轴号
#define		AXIS_4					4			// 第4轴轴号
#define		AXIS_5					5			// 第5轴轴号
#define		AXIS_6					6			// 第6轴轴号
#define		AXIS_7					7			// 第7轴轴号
#define		AXIS_8					8			// 第8轴轴号
#define		AXIS_9					9			// 第9轴轴号
#define		AXIS_10					10			// 第10轴轴号
#define		AXIS_11					11			// 第11轴轴号
#define		AXIS_12					12			// 第12轴轴号
#define		AXIS_13					13			// 第13轴轴号
#define		AXIS_14					14			// 第14轴轴号
#define		AXIS_15					15			// 第15轴轴号
#define		AXIS_16					16			// 第16轴轴号
#define		HW_AXIS					17			// 手轮轴号
#define		SP_AXIS					18			// 主轴轴号
#define 	INPA_AXIS				63			// A组插补轴轴号(常用)
#define 	INPB_AXIS				62			// B组插补轴轴号


/************************************************************************************************
 * 功能：初始化运动控制器
 *
 * 返回值：
 *		返回值为 ERR_NONE 时，表示初始化成功；
 *		返回值不为0时，表示初始化出错，例如:
 *					ERR_SEM_CREATE: 表示创建信号量错误
 *					ERR_RESPONSE_TIMEOUT：表示数据交换时通信超时
 *					_ERR_FPGA_WR: 表示FPGA读写测试错误
 *
 * 备注：使用运动库其它函数前，必须先进行初始化运动控制器
 ************************************************************************************************/
int adt_motion_init(void);

/************************************************************************************************
 * 功能：设置EtherCAT从站配置顺序
 *
 * 参数：
 * 		NodeNum				总节点数(最大32), 包含脉冲轴
 * 		OrderType[32]		代表轴的属性, 其中：
 * 								0： 		不存在
 * 								1：		本地脉冲轴
 * 								10-19： 	众为兴QXE伺服， 选11(带IO)， 选12(带IO、带多圈绝对位置)
 *								20-29：	新时达总线伺服， 建议选21(带IO)
 *								30-39：	松下A5B总线伺服，建议选30
 *								40-49:  山洋总线伺服， 建议选41
 *								50-59:  汇川总线伺服， 建议选50
 *								60-69:	E5系列总线步进，建议选60
 *								70-79:	之山总线伺服，建议选70
 *								200：	代表使用华太ET1616
 *								300：	代表使用ADT总线IO
 *
 * 返回值：参照错误码
 *
 * 备注： 控制器初始化后, 须首先调用该函数, 让底层运动库知道各从站信息;
 *     控制器初始化后, 该函数只能调用一次,如果要改变设置,需要重启控制器再调用
 ************************************************************************************************/
int adt_set_EtherCAT_slave_node_connect_order(int NodeNum, int OrderType[32]);

/************************************************************************************************
 * 功能：设置EtherCAT从站配置信息
 *
 * 参数：
 * 		NetPort				EtherCAT总线信息输出端口,CNC9816E仅能用端口2, 设置值对应关系为:
 * 								0:		使用EtherNet端口
 * 								1:		使用EtherCAT1端口
 * 								2:		使用EtherCAT2端口
 * 		AxisNodeNum			总轴数(最大16), 包含脉冲轴
 * 		AxisNodeType[30]	代表轴的属性, 其中：
 * 								0： 		轴不存在
 * 								1：		本地脉冲轴
 * 								10-19： 	众为兴QXE伺服， 选11(带IO)， 选12(带IO、带多圈绝对位置)
 *								20-29：	新时达总线伺服， 建议选21(带IO)
 *								30-39：	松下A5B总线伺服，建议选30
 *								40-49:  山洋总线伺服， 建议选41
 *								50-59:  汇川总线伺服， 建议选50
 *								60-69:	E5系列总线步进，建议选60
 *								70-79:	之山总线伺服，建议选70
 *		IoNodeNum			总线IO板数量(最大16)
 *		IoNodeInfo[16][3]	总线IO板信息，其中：
 *								IoNodeInfo[n][0]：代表第(n+1)个总线IO板属性， 100代表使用EM8200， 200代表使用华太ET1616，300代表使用ADT总线IO
 *								IoNodeInfo[n][1]：代表第(n+1)个EM8200挂载的输入模块的片数
 *								IoNodeInfo[n][2]：代表第(n+1)个EM8200挂载的输出模块的片数
 *
 * 返回值：参照错误码
 *
 * 备注： 控制器初始化后, 须首先调用该函数, 让底层运动库知道各从站信息;
 *     该函数调用后,如果有总线轴,则总线轴直接进入轴使能状态;
 *     若带有总线IO板, 若之前没有设置过从站配置顺序，则将总线IO板在最后一个总线伺服后面依次连接;
 *     该函数为阻塞式访问，建议重启让参数生效， 如果有总线轴，大概要有30秒耗时做主站的初始化;
 *     控制器初始化后, 该函数只能调用一次,如果要改变设置,需要重启控制器再调用;
 *     若使用EM8200总线IO板子，输入插片与输出插片都使用到，则必须先挨个插入输入插片，最后再插入输出插片
 ************************************************************************************************/
int adt_set_EtherCAT_slave_node_config(int NetPort, int AxisNodeNum, int AxisNodeType[30], int IoNodeNum, int IoNodeInfo[16][3]);

/************************************************************************************************
 * 功能：获取EtherCAT从站实际连接数量
 *
 * 参数：
 * 		num 	获取回来的实际连接数量(指针)
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_get_EtherCAT_slave_node_actual_num(int *num);

/************************************************************************************************
 * 功能：获取主站EtherCAT通信过程中出现的WKC累计错误次数
 *
 * 参数：
 * 		ReadErrCount 	读操作错误次数(指针)
 * 		WriteErrCount	写操作错误次数(指针)
 *
 * 返回值：参照错误码
 *
 * 备注：一般用于测试总线通信稳定性
 ************************************************************************************************/
int adt_get_EtherCAT_WKC_error_count(unsigned long * ReadErrCount,unsigned long * WriteErrCount);

/************************************************************************************************
 * 功能：清除EtherCAT通信过程中出现的WKC累计错误次数
 *
 * 参数：
 * 		无
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_clear_EtherCAT_WKC_error_count(void);

/************************************************************************************************
 * 功能：设置轴的物理映射
 *
 * 参数：
 * 		MapAxis[16]      范围(0-16), 参照轴号定义, 非零元素值不能重复, 若为某个元素值为0, 则不能往该轴输出脉冲
 *
 * 返回值：参照错误码
 *
 * 默认模式为：轴号一一对应
 *
 * 备注：如果需要设置物理轴映射, 控制器初始化的调用顺序是: 第一步：adt_motion_init()
 * 										     第二步：adt_set_EtherCAT_slave_node_config()
 * 										     第三步：adt_set_axis_physical_map()
 ************************************************************************************************/
int adt_set_axis_physical_map(int MapAxis[16]);

/************************************************************************************************
 * 功能：获取版本号
 *
 * 参数：
 * 		LibVer			当前函数接口库版本号
 *		MotionVer		当前运动控制器版本号
 *		FpgaVer1		当前FPGA1版本号
 *		FpgaVer2		当前FPGA2版本号
 *
 * 返回值：参照错误码
 *
 * 备注：该函数包含三部分版本信息，用于显示时可以用小数点连接，
 *       举例：若LibVer=6008，MotionVer=8008，FpgaVer1=1002，FpgaVer2=1001，则显示为：6008.8008.1002.1001
 ************************************************************************************************/
int adt_get_firmware_ver(int* LibVer,int* MotionVer,int* FpgaVer1,int* FpgaVer2);

/************************************************************************************************
 * 功能：设置输入数据的单位模式
 *
 * 参数：
 * 		mode			0: 基于脉冲当量方式编程；1：以脉冲为单位编程
 *
 * 返回值：参照错误码
 *
 * 默认模式：基于脉冲当量方式编程
 *
 * 备注：若以脉冲为单位方式编程，必须切换输入数据的单位模式，否则不接受任何运动指令
 ************************************************************************************************/
int adt_set_input_data_mode(int mode);

/************************************************************************************************
 * 功能：获取运动库异常
 *
 * 参数：
 * 		ErrorNum	错误号指针，参考错误码，主要有以下几种异常：
 * 										_ERR_EMERGENCY
 *										_ERR_MOTION_DATA
 *										_ERR_EtherCAT_CONNECT
 *										_ERR_AXIS_ALARM
 *
 * 返回值：参照错误码
 *
 * 备注： 该函数可以定时扫描获取运动库错误信息;
 *     若错误号指针指针传回来的数值不为 0, 即表示运动库遇到急停或严重错误, 必须复位或重启系统才行
 ************************************************************************************************/
int adt_get_motion_core_error(int * ErrorNum);

/************************************************************************************************
 * 功能：获取CNC9816E私有协议通信状态
 *
 * 参数：
 * 		FpgaTimeoutCount	FPGA端响应超时次数(指针)
 * 		A9FrameErrCount		A9端接收数据帧格式错误次数(指针)
 * 		A9ParityErrCount	A9端接收数据奇偶校验错误次数(指针)
 * 		A9CrcErrCount		A9端接收数据CRC校验错误次数(指针)
 * 		A9TimeoutCount		A9端接收数据超时次数(指针)
 *
 * 返回值：参照错误码
 *
 * 备注： 该函数可以定时扫描获取运动库错误信息;
 *     若错误号指针指针传回来的数值不为 0, 即表示运动库遇到急停或严重错误, 必须复位或重启系统才行
 ************************************************************************************************/
int adt_get_CNC9816E_communication_status(int * FpgaTimeoutCount,int * A9FrameErrCount,int * A9ParityErrCount,int * A9CrcErrCount,int * A9TimeoutCount);

/************************************************************************************************
 * 功能：设置运动库打印输出模式
 *
 * 参数：
 * 		mode			0: 禁止；1：使能
 *
 * 返回值：参照错误码
 *
 * 默认模式：禁止打印输出
 *
 * 备注：内部调试使用，为避免占用CPU资源，正常情况需禁止打印输出
 ************************************************************************************************/
int adt_set_debugout_mode(int mode);

/************************************************************************************************
 * 功能：设置输出脉冲的工作方式
 *
 * 参数：
 * 		axis		范围(1-16), 参照轴号定义
 * 		type       	0：CCW脉冲+CW脉冲方式   1：脉冲+方向方式   2：90°位相差2相脉冲（模拟编码器A+B相）
 * 		logic		0：	正逻辑脉冲			1：负逻辑脉冲
 * 		dir_logic	0：	方向输出信号正逻辑	1：方向输出信号负逻辑
 *
 * 返回值：参照错误码
 *
 * 默认模式：脉冲+方向，正逻辑脉冲，方向输出信号正逻辑
 ************************************************************************************************/
int adt_set_pulse_mode(int axis,int type,int logic,int dir_logic);

/************************************************************************************************
 * 功能：设置实际计数器(编码器输入)的工作方式
 *
 * 参数：
 * 		axis		范围(1-16，17-18), 参照轴号定义
 * 		type       	0：A/B脉冲输入	1：上/下（PPIN/PMIN）脉冲输入
 * 		dir_logic	计数方向，0：输入信号方向正逻辑	1：输入信号方向负逻辑
 *
 * 返回值：参照错误码
 *
 * 默认模式：A/B相脉冲输入，方向正逻辑
 *
 * 备注：设置为A/B相脉冲输入方式时，脉冲计数值为4倍频后的数据
 * 		 手轮轴固定为A/B脉冲输入方式，但可以改变计数方向
 ************************************************************************************************/
int adt_set_actual_count_mode(int axis, int type,int dir_logic);

/************************************************************************************************
 * 功能：设置本地脉冲轴的实际计数器(编码器输入)的工作方式
 *
 * 参数：
 * 		axis		范围(1-8，17-18), 参照轴号定义
 * 		type       	0：A/B脉冲输入	1：上/下（PPIN/PMIN）脉冲输入
 * 		dir_logic	计数方向，0：输入信号方向正逻辑	1：输入信号方向负逻辑
 *
 * 返回值：参照错误码
 *
 * 默认模式：A/B相脉冲输入，方向正逻辑
 *
 * 备注：   轴号参数不考虑轴的映射关系
 * 		设置为A/B相脉冲输入方式时，脉冲计数值为4倍频后的数据
 * 		手轮轴固定为A/B脉冲输入方式，但可以改变计数方向
 ************************************************************************************************/
int adt_set_actual_count_mode_local(int axis, int type,int dir_logic);

/************************************************************************************************
 * 功能：设置总线轴的电子齿轮比
 *
 * 参数：
 * 		axis				范围(1-16), 参照轴号定义
 * 		CoderValue			编码器转动一圈发出的脉冲个数
 * 		ElectronicValue		总线控制轴的电子齿轮比(大于1000), 即电机若旋转一圈,控制器需下发的脉冲个数
 *
 * 返回值：参照错误码
 *
 * 默认值: CoderValue与ElectronicValue值相等
 *
 * 备注： CoderValue 的值不能大于 CoderValue 的值
 ************************************************************************************************/
int adt_set_bus_axis_gear_ratio(int axis, int CoderValue, int ElectronicValue);

/************************************************************************************************
 * 功能：设置同步跟随轴(开环龙门双驱)
 *
 * 参数：
 * 		SlaveAxis      	从轴(跟随主轴的轴号), 范围(1-16), 参照轴号定义
 * 		MasterAxis		主轴(被跟随的轴号), 轴号(0-16), 值为 0  则代表相应的从轴取消跟随
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_set_follow_axis(int SlaveAxis,int MasterAxis);

/************************************************************************************************
 * 功能：初始(结束)速度设定
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		axis			范围(1-16, 62-63), 参照轴号定义
 *		speed			范围(0-5M),单位: pulse/sec
 *
 * 返回值：参照错误码
 *
 * 默认值：2000 pulse/sec
 *
 * 备注：默认情况下设定起始速度时，会将结束速度等同于起始速度，所以要设定结束速度，
 *		 则set_endv一定要放在set_startv后面，否则，结束速度值会被起始速度覆盖掉。
 *		 设置一定的初始速度，例如2000pulse/sec, 可使得机床较快启动
 ************************************************************************************************/
int adt_set_startv_pulse(int axis,long speed);
int adt_set_endv_pulse(int axis,long speed);

/************************************************************************************************
 * 功能：设置加速度
 *		(以脉冲为单位编程)
 *
 * 参数：
 * 		axis			范围(1-16, 62-63), 参照轴号定义
 *		acc				加速度 范围(1-20M),pulse/sec^2
 *
 * 返回值：参照错误码
 *
 * 备注：支持不对称加减速，默认情况下设定加速度时，会将减速度等同于加速度，所以要设定减速度，
 *		 则set_dec一定要放在set_acc后面，否则，减速度值会被加速度覆盖掉。
 ************************************************************************************************/
int adt_set_acc_pulse(int axis,long acc);

/************************************************************************************************
 * 功能：设置减速度
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		axis			范围(1-16, 62-63), 参照轴号定义
 *		dec				减速度 范围(1-20M),pulse/sec^2
 *
 * 返回值：参照错误码
 *
 * 备注：支持不对称加减速，默认情况下设定加速度时，会将减速度等同于加速度，所以要设定减速度，
 *		 则set_dec一定要放在set_acc后面，否则，减速度值会被加速度覆盖掉。
 ************************************************************************************************/
int adt_set_dec_pulse(int axis,long dec);

/************************************************************************************************
 * 功能：设置轴驱动速度
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		axis			范围(1-16, 62-63), 参照轴号定义
 *		speed			范围(1-5M pulse/sec)
 *
 * 返回值：参照错误码
 ************************************************************************************************/
int adt_set_speed_pulse(int axis,long speed);

/************************************************************************************************
 * 功能：获取轴当前驱动速度
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		axis			范围(1-16, 62-63), 参照轴号定义
 *		speed			指向当前驱动速度的指针, 单位：pulse/sec
 *
 * 返回值：参照错误码
 ************************************************************************************************/
int adt_get_speed_pulse(int axis,long *speed);

/************************************************************************************************
 * 功能：点位运动
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		axis			范围(1-16), 参照轴号定义
 *		fpos			单位为pulse，(+/- 268435455)
 *							>0：正方向驱动				<0：负方向驱动
 *
 * 返回值：参照错误码
 *
 * 备注：可以在插补运动暂停后插入该指令
 ************************************************************************************************/
int adt_pmove_pulse(int axis,long pos);

/************************************************************************************************
 * 功能：绝对式点位运动
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		axis			范围(1-16), 参照轴号定义
 *		pos				单位为pulse，(+/- 268435455)
 *							>0：正方向驱动				<0：负方向驱动
 *
 * 返回值：参照错误码
 *
 * 备注：可以在插补运动暂停后插入该指令
 ************************************************************************************************/
int adt_abs_pmove_pulse(int axis,long pos);

/************************************************************************************************
 * 功能：获取单轴固定速度移动的剩余缓存段数
 *
 * 参数：
 * 		axis		范围(1-16), 参照轴号定义
 * 		len			要获取的缓冲长度变量
 *
 * 返回值：参照错误码
 *
 * 备注：各轴缓冲区段数共有2000段。插补数据与单轴固定速度移动数据存放在控制器中不同的区域；
 *		 建议当缓存余量大于100段时才下发运动数据
 ************************************************************************************************/
int adt_get_fifo_pmove_len(int axis,int *len);

/************************************************************************************************
 * 功能：单轴相对坐标固定速度运动
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		index		索引信息，用于标识本次运动信息，一般设置为0即可
 * 		axis		范围(1-16), 参照轴号定义
 *		pos			代表轴移动的相对距离,单位为pulse
 *		speed		移动速度，单位：pulse/sec, 范围（1-5M）
 *
 * 返回值：参照错误码
 *
 * 备注：单轴固定速度移动指令有自己的缓存空间，各轴2000条；
 * 		 可以在插补运动暂停后插入该指令
 ************************************************************************************************/
int adt_fifo_pmove_pulse(int index,int axis,long pos,long speed);

/************************************************************************************************
 * 功能：单轴绝对坐标固定速度运动
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		index			索引信息，用于标识本次运动信息，一般设置为0即可。
 * 		axis			范围(1-16), 参照轴号定义
 *		pos			 	代表轴要移动到的坐标值,单位为pulse
 *		speed			移动速度，单位：pulse/sec, 范围（1-5M）
 *
 * 返回值：参照错误码
 *
 * 备注：单轴固定速度移动指令有自己的缓存空间，各轴2000条；
 * 		 可以在插补运动暂停后插入该指令
 ************************************************************************************************/
int adt_fifo_abs_pmove_pulse(int index,int axis,long pos,long speed);

/************************************************************************************************
 * 功能：单轴连续运动
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		axis			范围(1-16), 参照轴号定义
 *		dir				0:正向 ;1：负向
 *
 * 返回值：参照错误码
 *
 * 备注： 写入驱动命令前,需提前设定好速度参数
 ************************************************************************************************/
int adt_continue_move_pulse(int axis,int dir);

/************************************************************************************************
 * 功能：启用速度前瞻(速度预处理)
 *
 * 参数：
 * 		InpAxis 		范围(62-63), 参照轴号定义
 * 		EnableFlag		0：无效						1：有效
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_set_speed_pretreat_mode(int InpAxis,int EnableFlag);

/************************************************************************************************
 * 功能：设置拐角速度平滑等级
 *
 * 参数：
 * 		axis		范围(1-16), 参照轴号定义
 * 		value		范围(1-100)
 *
 * 返回值：参照错误码
 *
 * 默认值：50
 *
 * 备注：该函数设置的值会在启用速度前瞻后生效。
 * 		 默认值已满足大部分工艺情况，一般情况无需调用。
 * 		 增大拐角速度的平滑等级会提高机床整体的加工效率与运动稳定性，但是也会引起拐角处单轴较大的启停速度。
 * 		 对应负载较大(较重)的轴，建议适当调低平滑等级，防止失步或者跟随滞后。
 ************************************************************************************************/
int adt_set_corner_speed_smooth_level(int axis,int level);

/************************************************************************************************
 * 功能：获取运动指令的最终目标位置
 *		(以脉冲为单位编程)
 *
 * 参数：
 * 		RectMacpos[16]	目标位置,单位为pulse
 *
 * 返回值：参照错误码
 *
 * 备注：目标位置即所有已下发的运动指令执行完毕后，得到的机床绝对坐标；
 * 	  	 若该轴设置了位置变环功能, 则对应数组元素的值为变环后的数据, 此时若想调用累计目标位置需调用adt_get_big_target_pos_pulse()获取；
 * 		 该函数可以在运动过程中获取，也可以在轴空闲时获取；
 * 		 该函数不能无间隔频繁调用，否则会降低跑运动库CPU的效率
 ************************************************************************************************/
int adt_get_target_pos_pulse(long RectMacpos[16]);

/************************************************************************************************
 * 功能：获取各轴运动的最终目标位置
 *		(以脉冲为单位编程)
 *
 * 参数：
 * 		axis		范围(1-16), 参照轴号定义
 * 		pos			目标位置指针,单位为pulse
 *
 * 返回值：参照错误码
 *
 * 备注：目标位置即所有已下发的运动指令执行完毕后，得到的机床绝对坐标；
 * 	  	 若该轴设置了位置变环功能, 则对应数组元素的值为变环后的数据, 此时若想调用累计目标位置需调用adt_get_big_target_pos_pulse()获取；
 * 		 该函数可以在运动过程中获取，也可以在轴空闲时获取；
 * 		 该函数不能无间隔频繁调用，否则会降低跑运动库CPU的效率
 ************************************************************************************************/
int adt_get_axis_target_pos_pulse(int axis,long * pos);

/************************************************************************************************
 * 功能：获取大位置方式编程运动指令的最终目标位置
 *		(以脉冲为单位编程)
 *
 * 参数：
 * 		RectMacpos[16]	目标位置,单位为pulse
 *
 * 返回值：参照错误码
 *
 * 备注：目标位置即所有已下发的运动指令执行完毕后，得到的机床绝对坐标；
 * 		 该函数可以在运动过程中获取，也可以在轴空闲时获取；
 * 		 该函数不能无间隔频繁调用，否则会降低跑运动库CPU的效率
 ************************************************************************************************/
int adt_get_big_target_pos_pulse(long long RectMacpos[16]);

/************************************************************************************************
 * 功能：获取大位置方式编程各轴运动的最终目标位置
 *		(以脉冲为单位编程)
 *
 * 参数：
 * 		axis		范围(1-16), 参照轴号定义
 * 		pos			目标位置指针,单位为pulse
 *
 * 返回值：参照错误码
 *
 * 备注：目标位置即所有已下发的运动指令执行完毕后，得到的机床绝对坐标；
 * 		 该函数可以在运动过程中获取，也可以在轴空闲时获取；
 * 		 该函数不能无间隔频繁调用，否则会降低跑运动库CPU的效率
 ************************************************************************************************/
int adt_get_axis_big_target_pos_pulse(int axis,long long * pos);

/************************************************************************************************
 * 功能：获取剩余缓存段数
 *
 * 参数：
 * 		InpAxis 	范围(62-63), 参照轴号定义
 * 		len			要获取的缓冲长度变量
 *
 * 返回值：参照错误码
 *
 * 备注：插补缓冲区段数共有10000段。插补数据与缓存事件存放在控制器中不同的区域。
 *		 一段圆弧占用4段缓存空间，一个整圆占用8段缓存空间。建议当缓存余量大于1000段时才下发运动数据。
 ************************************************************************************************/
int adt_get_fifo_inp_len(int InpAxis,int *len);

/************************************************************************************************
 * 功能：获取当前插补运动的索引信息
 *
 * 参数：
 * 		InpAxis 	范围(62-63), 参照轴号定义
 * 		index       索引信息的指针
 *
 * 返回值：参照错误码
 *
 * 备注：此函数用于G代码加工时的同步显示使用
 ************************************************************************************************/
int adt_get_inp_index(int InpAxis,int *index);

/************************************************************************************************
 * 功能：十六轴相对坐标直线插补
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		InpAxis 		范围(62-63), 参照轴号定义
 * 		index			索引信息，用于标识本次运动信息，一般设置为0即可
 *		pos1			代表X轴移动的相对距离,单位为pulse
 *		pos2			代表Y轴移动的相对距离,单位为pulse
 *		pos3			代表Z轴移动的相对距离,单位为pulse
 *		pos4			代表A轴移动的相对距离,单位为pulse
 *		pos5			代表B轴移动的相对距离,单位为pulse
 *		pos6			代表C轴移动的相对距离,单位为pulse
 *
 * 返回值：参照错误码
 *
 * 备注：若设置了同步轴，则从轴的pos参数要设置为0，否则函数调用失败。
 ************************************************************************************************/
int adt_inp_move16_pulse(int InpAxis,int index,long pos[16]);

/************************************************************************************************
 * 功能：十六轴相对坐标固定速度直线插补
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		InpAxis 		范围(62-63), 参照轴号定义
 * 		index			索引信息，用于标识本次运动信息，一般设置为0即可
 *		pos1			代表X轴移动的相对距离,单位为pulse
 *		pos2			代表Y轴移动的相对距离,单位为pulse
 *		pos3			代表Z轴移动的相对距离,单位为pulse
 *		pos4			代表A轴移动的相对距离,单位为pulse
 *		pos5			代表B轴移动的相对距离,单位为pulse
 *		pos6			代表C轴移动的相对距离,单位为pulse
 *		speed			合成速度，单位：pulse/sec, 范围（1-5M）
 *
 * 返回值：参照错误码
 *
 * 备注：若设置了同步轴，则从轴的pos参数要设置为0，否则函数调用失败。
 ************************************************************************************************/
int adt_fifo_inp_move16_pulse(int InpAxis,int index,long pos[16],long speed);

/************************************************************************************************
 * 功能：十六轴绝对坐标直线插补
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		InpAxis 		范围(62-63), 参照轴号定义
 * 		index			索引信息，用于标识本次运动信息，一般设置为0即可。
 *		AxisMap			轴映射位，bit0表示1号轴，bit1表示2号轴，…，不被标志的轴，目标位置不会生效。
 *		pos1			代表X轴要移动到的坐标值,单位为pulse
 *		pos2			代表Y轴要移动到的坐标值,单位为pulse
 *		pos3			代表Z轴要移动到的坐标值,单位为pulse
 *		pos4			代表A轴要移动到的坐标值,单位为pulse
 *		pos5			代表B轴要移动到的坐标值,单位为pulse
 *		pos6			代表C轴要移动到的坐标值,单位为pulse
 *
 * 返回值：参照错误码
 *
 * 备注：若设置了同步轴，则从轴的pos参数要设置为0,AxisMap值也不用考虑从轴位
 ************************************************************************************************/
int adt_inp_abs_move16_pulse(int InpAxis,int index,int AxisMap,long pos[16]);

/************************************************************************************************
 * 功能：十六轴绝对坐标固定速度直线插补
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		InpAxis 		范围(62-63), 参照轴号定义
 * 		index			索引信息，用于标识本次运动信息，一般设置为0即可。
 *		AxisMap			轴映射位，bit0表示1号轴，bit1表示2号轴，…，不被标志的轴，目标位置不会生效。
 *		pos1			代表X轴要移动到的坐标值,单位为pulse
 *		pos2			代表Y轴要移动到的坐标值,单位为pulse
 *		pos3			代表Z轴要移动到的坐标值,单位为pulse
 *		pos4			代表A轴要移动到的坐标值,单位为pulse
 *		pos5			代表B轴要移动到的坐标值,单位为pulse
 *		pos6			代表C轴要移动到的坐标值,单位为pulse
 *		speed			合成速度（从上一点坐标移动到当前绝对坐标的合成速度），单位：pulse/sec, 范围（1-5M）
 *
 * 返回值：参照错误码
 *
 * 备注：若设置了同步轴，则从轴的pos参数要设置为0,AxisMap值也不用考虑从轴位
 ************************************************************************************************/
int adt_fifo_inp_abs_move16_pulse(int InpAxis,int index,int AxisMap,long pos[16],long speed);

/************************************************************************************************
 * 功能：多轴直线插补
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		InpAxis 		范围(62-63), 参照轴号定义
 * 		PosType			0：相对坐标插补		1：绝对坐标插补
 * 		index			索引信息，用于标识本次运动信息，一般设置为0即可。
 * 		AxisTotal		参与插补运动的轴数总和
 * 		...				可变形参，代表轴号与坐标值
 *
 * 	返回值：参照错误码
 *
 * 	举例1：A组2轴相对坐标移动，第1号轴移动1001，第3号轴移动3003，则调用：adt_inp_moves_pulse(63,0,0,2, 1,1001, 3,3003);
 * 	举例2：B组4轴绝对坐标移动，第2号轴移动2002，第4号轴移动4004，第5号轴移动5005，第6号轴移动6006，则调用：adt_inp_moves_pulse(62,1,0,4, 2,2002, 4,4004, 5,5005, 6,6006);
 *
 * 	备注：AxisTotal的值要填写正确，确保可变形参(...)的总个数是AxisTotal值的两倍或以上，否则会导致程序崩溃
************************************************************************************************/
int adt_inp_moves_pulse(int InpAxis,int PosType,int index,int AxisTotal,...);

/************************************************************************************************
 * 功能：任意多轴直线插补
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		InpAxis 		范围(62-63), 参照轴号定义
 * 		PosType			0：相对坐标插补		1：绝对坐标插补
 * 		index			索引信息，用于标识本次运动信息，一般设置为0即可。
 * 		AxisNum			参与插补运动的轴数总和
 * 		AxisList		轴号列表
 * 		PosList			目标位置列表 (相对坐标 / 绝对坐标)
 *
 * 	返回值：参照错误码
 *
 * 	备注：
************************************************************************************************/
int adt_inp_multi_move_pulse(int InpAxis,int PosType,int index,int AxisNum,int AxisList[16],long PosList[16]);

/************************************************************************************************
 * 功能：多轴固定速度直线插补
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		InpAxis 		范围(62-63), 参照轴号定义
 * 		PosType			0：相对坐标插补		1：绝对坐标插补
 * 		index			索引信息，用于标识本次运动信息，一般设置为0即可。
 * 		speed			合成速度，单位：pulse/sec, 范围（1-5M）
 * 		AxisTotal		参与插补运动的轴数总和
 * 		...				可变形参，代表轴号与坐标值
 *
 * 返回值：参照错误码
 *
 * 举例1：A组2轴相对坐标移动，移动速度为200000 pulse/sec,第1号轴移动1001，第3号轴移动3003，
 * 			则调用：adt_fifo_inp_moves_pulse(63,0,0,200000,2, 1,1001, 3,3003);
 * 举例2：B组4轴绝对坐标移动，移动速度为500000 pulse/sec,第2号轴移动2002，第4号轴移动4004，第5号轴移动5005，第6号轴移动6006，
 * 			则调用：adt_fifo_inp_moves_pulse(62,1,0,500000,4, 2,2002, 4,4004, 5,5005, 6,6006);
 *
 * 备注：AxisTotal的值要填写正确，确保可变形参(...)的总个数是AxisTotal值的两倍或以上，否则会导致程序崩溃
************************************************************************************************/
int adt_fifo_inp_moves_pulse(int InpAxis,int PosType,int index,long speed,int AxisTotal,...);

/************************************************************************************************
 * 功能：任意多轴固定速度直线插补
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		InpAxis 		范围(62-63), 参照轴号定义
 * 		PosType			0：相对坐标插补		1：绝对坐标插补
 * 		index			索引信息，用于标识本次运动信息，一般设置为0即可。
 * 		speed			合成速度，单位：pulse/sec, 范围（1-5M）
 * 		AxisNum			参与插补运动的轴数总和
 * 		AxisList		轴号列表
 * 		PosList			目标位置列表 (相对坐标 / 绝对坐标)
 *
 * 返回值：参照错误码
 *
 * 备注：
************************************************************************************************/
int adt_fifo_inp_multi_move_pulse(int InpAxis,int PosType,int index,long speed,int AxisNum,int AxisList[16],long PosList[16]);

/************************************************************************************************
 * 功能：获取输出点过流报警信号
 *
 * 参数：
 * 		flag1		报警标志指针1, 值为 1 时, 代表OUT0~OUT11中有输出点出现过流现象
 * 		flag2		报警标志指针2, 值为 1 时, 代表OUT12~OUT23中有输出点出现过流现象
 *
 * 返回值：参照错误码
 *
 * 备注：ADT-1600控制板特有功能
 ************************************************************************************************/
int adt_get_overcurrent_warning(int *flag1, int *flag2);

/************************************************************************************************
 * 功能：设置总线轴的松锁轴功能
 *
 * 参数：
 * 		type			0 对所有轴操作; 1 对单个轴操作
 * 		axis			范围(1-16), 参照轴号定义，对所有轴操作时写0即可
 * 		EnableFlag		1: 轴使能         0: 松轴
 *
 * 返回值：参照错误码
 *
 * 备注： 该函数为阻塞式访问，大概有3秒耗时做状态切换;
 ************************************************************************************************/
int adt_set_bus_axis_enable(int type,int axis,int EnableFlag);

/************************************************************************************************
 * 功能：设置输入端口的滤波等级
 *
 * 参数：
 *		group		对于ADT-4640、ADT-4960、ADT-9816:
 *										  0: 本地IO			1：扩展IO
 *					对于AMC1600E: 		  0: DB头输入、限位输入	1：通用输入
 * 		grade		范围:0-15。0表示不滤波。若设为n，则滤波时间为：2的n次方us(微秒)
 *
 * 返回值：参照错误码
 *
 * 备注：默认等级为10，即滤波1024微妙，防止输入信号因干扰误触发
 ************************************************************************************************/
int adt_set_input_filter(int group,int grade);

/************************************************************************************************
 * 板卡输入点状态说明:
 * 	  1. 输入点的IO号定义按照ADT-4960说明
 * 	  2. 对应控制器为ADT-4640时，要获取报警输入信号IN34~IN38的输入点状态， 则传进来的IO号，要加32再获取；
 *    3. 对应控制器为ADT-4640时，要获取手轮IN24~IN33的输入点状态， 则传进来的IO号，要加32再获取；
 *    4. ADT-4640与ADT-4960的伺服Z相对应关系是：
 *    		ADT-4640的  IN40 (对应) ADT-4960 的 IN72
 *    		ADT-4640的  IN43 (对应) ADT-4960 的 IN73
 *    		ADT-4640的  IN46 (对应) ADT-4960 的 IN74
 *    		ADT-4640的  IN49 (对应) ADT-4960 的 IN75
************************************************************************************************/

/************************************************************************************************
 * 功能：按组获取输入/输出点状态
 *
 * 参数：
 * 		group		组号，其中：
 * 						组号 0x00，读取 OUT0 ～OUT15
 * 						组号 0x01，读取 OUT16～OUT31
 * 						组号 0x02，读取 OUT32～OUT47
 * 						组号 0x03，读取 OUT48～OUT59
 *
 * 						组号 0x10，读取 IN0 ～IN15
 * 						组号 0x11，读取 IN16～IN31
 * 						组号 0x12，读取 IN32～IN47
 * 						组号 0x13，读取 IN48～IN63
 * 						组号 0x14，读取 IN64～IN79(有效：IN64～IN71)
 * 						组号 0x15，读取 IN80～IN95(有效：IN91～IN94)
 *
 *		levelmap	该组输入/输出点的状态指针（通过位值显示某个输入/输出点的状态，如OUT0对应bit0,OUT1对应bit1）
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_get_gpio(int group,unsigned long *levelmap);

/************************************************************************************************
 * 功能：按组操作输出点状态
 *
 * 参数：
 * 		group			组号，其中：
 *		  					OUT0～OUT15， 组号为0x00
 * 							OUT16～OUT31，组号为0x01
 * 							OUT32～OUT47，组号为0x02
 * 							OUT48～OUT59，组号为0x03
 *		levelmap		该组输出点的状态设置（通过位值设定某个输出点的状态，如OUT0对应bit0,OUT1对应bit1）
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_set_gpio(int group,unsigned long levelmap);

/************************************************************************************************
 * 功能：获取单个输出点状态
 *
 * 参数：
 * 		number			输出点(0-59)
 *		status			指向当前输出点状态的指针
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_get_out(int number,int *status);

/************************************************************************************************
 * 功能：获取EtherCAT远程IO板输出点状态
 *
 * 参数：
 * 		BoardNum		扩展板编号(1-16)
 * 		OutputNum		输出点(0-15)
 *		status			指向当前输出点状态的指针
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_get_EtherCAT_RemoteIO_Output(int BoardNum,int OutputNum,int *status);

/************************************************************************************************
 * 功能：获取EtherCAT远程IO板输出点过流报警信号
 *
 * 参数：
 * 		BoardNum		扩展板编号(1-16)
 * 		flag			报警标志指针, 值为 1 时, 代表有输出点出现过流现象
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_get_EtherCAT_RemoteIO_overcurrent_warning(int BoardNum, int *flag);

/************************************************************************************************
 * 功能：按位操作输出点状态
 *
 * 参数：
 * 		number			输出点(0-59)
 *		value			0: 关闭				1: 打开
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_write_bit(int number,int value);

/************************************************************************************************
 * 功能：按位操作EtherCAT远程IO板输出点
 *
 * 参数：
 * 		BoardNum		扩展板编号(1-16)
 * 		OutputNum		输出点(0-15)
 *		value			0: 关闭				1: 打开
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_write_EtherCAT_RemoteIO_Output(int BoardNum,int OutputNum,int value);

/************************************************************************************************
 * 功能：按位读取输入点状态
 *
 * 参数：
 * 		number			输入点(IN0~IN71, IN91~IN94), 其中:
 * 							IN91为手轮A相输入端口
 * 							IN92为手轮B相输入端口
 * 						另外，8个驱动轴的编码器Z相信号对应的端口为：
 * 								IN72～IN79:	Z1...Z8
 *		status			指向当前输入点状态的指针
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_read_bit(int number,int *status);

/************************************************************************************************
 * 功能：按位读取总线伺服输入点状态
 *
 * 参数：
 * 		axis			范围(1-16), 参照轴号定义
 * 		number			输入点(IN0~IN31)
 *		status			指向当前输入点状态的指针
 *
 * 返回值：参照错误码
 *
 * 备注：调用该函数时, 相应轴的属性须为总线伺服, 而且IO号存在, 返回的状态值才有效
 ************************************************************************************************/
int adt_read_servo_input(int axis,int number,int * status);

/************************************************************************************************
 * 功能：按位读取EtherCAT远程IO板输入点状态
 *
 * 参数：
 * 		BoardNum		扩展板编号(1-16)
 * 		InputNum		输入点(IN0~IN15)
 *		status			指向当前输入点状态的指针
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_read_EtherCAT_RemoteIO_input(int BoardNum,int InputNum,int * status);

/************************************************************************************************
 * 功能：设置逻辑位置可变环功能
 *
 * 参数：
 * 		axis			范围(1-16), 参照轴号定义
 * 		EnableFlag		0：无效			1：有效
 * 		CompPos			逻辑位置计数器的最大数值, 启用位置变环功能时该值须大于0
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_set_pos_variable_loop(int axis,int EnableFlag,long CompPos);

/************************************************************************************************
 * 功能：获取各轴的逻辑位置
 *
 * 参数：
 * 		axis			范围(1-16), 参照轴号定义
 *		pos				逻辑位置的指针，单位：pulse
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_get_command_pos(int axis,long *pos);

/************************************************************************************************
 * 功能：设置逻辑位置
 *
 * 参数：
 * 		axis			范围(1-16), 参照轴号定义
 *		pos				范围(-2147483648～+2147483647)，单位：pulse
 *
 * 返回值：参照错误码
 *
 * 备注：当某个轴已经设置变环的情况下, 调用该函数, 若设置的逻辑位置超出变环值或为负数, 则运动库会自动把设置值转换为变环后的数据再设置到底层去.
 ************************************************************************************************/
int adt_set_command_pos(int axis,long pos);

/************************************************************************************************
 * 功能：获取各轴的实际位置
 *
 * 参数：
 * 		axis			范围(1-16,17-18), 参照轴号定义
 *		pos				实际位置的指针，单位：pulse
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_get_actual_pos(int axis,long *pos);

/************************************************************************************************
 * 功能：获取本地脉冲轴的实际位置
 *
 * 参数：
 * 		axis			范围(1-8,17-18), 参照轴号定义
 *		pos				实际位置的指针，单位：pulse
 *
 * 返回值：参照错误码
 *
 * 备注：轴号参数不考虑轴的映射关系
 ************************************************************************************************/
int adt_get_actual_pos_local(int axis,long *pos);

/************************************************************************************************
 * 功能：获取各轴绝对式编码器的位置信息
 *
 * 参数：
 * 		axis			范围(1-16), 参照轴号定义
 * 		EncTurns		编码器多圈圈数
 *		EncSinTurnPos	编码器单圈绝对位置，单位：pulse
 *
 * 返回值：参照错误码
 *
 * 备注：现仅适用于带绝对式编码器电机的QXE驱动器
 ************************************************************************************************/
int adt_get_absolute_encoder_pos(int axis, unsigned long *EncTurns, unsigned long *EncSinTurnPos);

/************************************************************************************************
 * 功能：设置编码器位置
 *
 * 参数：
 * 		axis			范围(1-16,17-18), 参照轴号定义
 *		pos				范围(-2147483648～+2147483647)，单位：pulse
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_set_actual_pos(int axis,long pos);

/************************************************************************************************
 * 功能：设置本地脉冲轴的编码器位置
 *
 * 参数：
 * 		axis			范围(1-8,17-18), 参照轴号定义
 *		pos				范围(-2147483648～+2147483647)，单位：pulse
 *
 * 返回值：参照错误码
 *
 * 备注：轴号参数不考虑轴的映射关系
 ************************************************************************************************/
int adt_set_actual_pos_local(int axis,long pos);

/************************************************************************************************
 * 功能：获取当前实际位置对应的单圈位置值
 *
 * 参数：
 * 		CoderValue				编码器转动一圈发出的脉冲个数，单位：pulse
 *		ActualPos				当前的实际位置，单位：pulse
 *		CirclePos				单圈位置值指针，单位：pulse
 *
 * 返回值：参照错误码
 *
 * 备注：CoderValue变量须为正值
 ************************************************************************************************/
int adt_get_one_circle_actual_pos(long CoderValue,long ActualPos,long * CirclePos);

/************************************************************************************************
 * 功能：设置总线轴的编码器位置偏移量
 *
 * 参数：
 * 		axis			范围(1-16), 参照轴号定义
 * 		OffsetPos		偏移位置大小
 *
 * 返回值：参照错误码
 *
 * 备注： 调用adt_get_actual_pos(…)得到的 位置 = 实际编码器位置 + 偏移量;
 ************************************************************************************************/
int adt_set_actual_pos_offset(int axis,long OffsetPos);

/************************************************************************************************
 * 功能：设置输入模式
 *
 * 参数：
 * 		axis			范围(1-16), 参照轴号定义
 *		mode			模式 	0：正限位		1：负限位		2：原点		3: 编码器Z相信号
 *		port			输入端口号(0-31)；要设置对应模式无效，则输入255
 *						另外，8个驱动轴的编码器Z相信号对应的端口为：
 *							IN72～IN79:	Z1...Z8 (编码器Z相信号固定端口)
 *		logic			有效电平	0：低电平有效	1：高电平有效
 *		admode			有效电平触发时的停止模式，	0：减速停止；	1：立即停止
 *
 * 返回值：参照错误码
 *
 * 备注：默认模式为：正限位低电平有效，负限位低电平有效，原点、编码器Z相信号无效；
 *		 正负限位暂仅支持立即停止模式；
 *		 归零时用到的原点或编码器Z相信号模式，要分时启用，机械原点归零结束后使其无效，再进行编码器Z相归零.
 ************************************************************************************************/
int adt_set_input_mode(int axis,int mode,int port,int logic,int admode);

/************************************************************************************************
 * 功能：设置限位触发时锁保护
 *
 * 参数：
 * 		EnableFlag		0:无效			1:有效
 *
 * 返回值：参照错误码
 *
 * 默认模式：限位触发时锁保护无效
 *
 * 备注：启用该功能后，机器运行过程中若有限位信号触发，则控制卡进入自锁模式，不再接受任何运动指令，除非复位卡函数
 ************************************************************************************************/
int adt_set_limit_lock(int EnableFlag);

/************************************************************************************************
 * 功能：设置紧急停止模式
 * 参数：
 * 		port		快速输入端口号(0-31)；要设置对应模式无效，则输入255
 * 		logic		有效电平	0：低电平有效			1：高电平有效
 *
 * 返回值：参照错误码
 *
 * 备注：默认紧急停止无效。外部急停一旦生效，所有运动轴立即停止，解除急停信号后，需调用adt_reset_motion_core()复位控制器，
 * 	     否则即便急停有效电平已经解除， 调用任何运动指令都不会生效。
 ************************************************************************************************/
int adt_set_emergency_stop_mode(int port,int logic);

/************************************************************************************************
 * 功能：复位控制器
 *
 * 参数：无
 *
 * 返回值：参照错误码
 *
 * 备注:  调用该函数后，控制器会清除所有缓存事件及运动指令数据；
 * 		  但已经设置过的限位、加速度、齿轮比等运动参数不会清除，不需重新设置；若之前设置有同步轴，轴的同步关系也不会清除
 * 		  当机床遇到紧急停止，所有运动轴立即停止，解除急停信号后，必须调用一次复位控制器函数，控制器才会重新接受运动指令。
 ************************************************************************************************/
int adt_reset_motion_core(void);

/************************************************************************************************
 * 功能：获取所有轴运动状态
 *
 * 参数：
 * 		status			指向当前轴状态的指针；bit0～bit15代表第一轴～第十六轴，bit31代表A组插补轴，bit30代表B组插补轴
 * 						值非0表示有轴在运动
 *
 * 返回值：参照错误码
 *
 * 备注：当轴倍率为0时, 则相应轴状态也跟着为0
 ************************************************************************************************/
int adt_get_status_all(int *status);

/************************************************************************************************
 * 功能：获取各轴运动状态
 *
 * 参数：
 * 		axis			范围(1-16, 62-63), 参照轴号定义
 *		status			指向当前轴驱动状态的指针, 值为1就表示处于运动状态
 *
 * 返回值：参照错误码
 *
 * 备注：当轴倍率为0时, 则相应轴状态也跟着为0
 ************************************************************************************************/
int adt_get_status(int axis,int *status);

/************************************************************************************************
 * 功能：获取任意轴目标位置到达状态
 *
 * 参数：
 * 		type			0：对所有轴操作；		1：操作轴号范围(1-16，62-63), 参照轴号定义
 * 		axis			范围(1-16, 62-63), 参照轴号定义, 如果是对所有轴操作，置0即可
 *		status			指向位置到达状态的指针, 值为1表示位置未到达(轴有运动数据), 值为0表示位置到达(轴无运动数据)
 *
 * 返回值：参照错误码
 *
 * 备注：轴的位置到达状态, 不受相关轴倍率大小影响, 只要存在运动数据, 则处于位置未到达状态
 ************************************************************************************************/
int adt_get_pos_reach_status(int type,int axis,int *status);

/************************************************************************************************
 * 功能：获取总线轴的报警状态
 *
 * 参数：
 * 		axis			范围(1-16), 参照轴号定义
 *		Alarm			指向当前轴报警状态的指针, 报警状态有:
 *							_ERR_NONE: 		   表示无报警
 *							_ERR_AXIS_ALARM: 表示出现轴报警
 *							_ERR_EtherCAT_CONNECT: 表示出现总线通信故障
 *
 * 返回值：参照错误码
 *
 * 备注：传进的轴号为总线轴时, 返回的报警状态才有效
 ************************************************************************************************/
int adt_get_axis_alarm_info(int axis,int * Alarm);

/************************************************************************************************
 * 功能：设置驱动立即停止、减速停止
 *
 * 参数：
 * 		axis			范围(1-16), 参照轴号定义
 *		mode			0 减速停止；1 立即停止
 *
 * 返回值：参照错误码
 *
 * 备注：当插补轴倍率为0时，调用相关轴停止指令，插补数据也不会清零
 ************************************************************************************************/
int adt_set_stop(int axis,int mode);

/************************************************************************************************
 * 功能：设置任意轴停止
 *
 * 参数：
 * 		type			0：对所有轴操作；		1：操作轴号范围(1-16，62-63), 参照轴号定义
 * 		axis			范围(1-16，62-63), 参照轴号定义，如果是对所有轴操作，置0即可
 *		mode			0 减速停止；1 立即停止
 *
 * 返回值：参照错误码
 *
 * 备注：当插补轴倍率为0时，调用相关轴停止指令，插补数据也不会清零
 ************************************************************************************************/
int adt_set_axis_stop(int type, int axis, int mode);

/************************************************************************************************
 * 功能：设置加减速模式
 *
 * 参数：
 * 		axis			范围(1-16, 62-63), 参照轴号定义
 *		mode			范围(0-3)
 *							0 S形加减速模式
 *							1 梯形加减速模式
 *							2 指数加减速
 *							3 三角函数加减速模式
 *
 * 返回值：参照错误码
 *
 * 备注：默认是梯形加减速模式，点位运动和单条直线插补可以用其中任意的模式
 *		 单条圆弧插补可以使用模式1和模式3，样条插补使用模式1
 *		 插补情况下使用非梯形加减速模式须禁用速度前瞻
 ************************************************************************************************/
int adt_set_admode(int axis,int mode);

/************************************************************************************************
 * 功能：设置总倍率、设置单轴倍率
 *
 * 参数：
 * 		type			0 总倍率; 1 单轴
 *		axis			范围(1-16, 62-63), 参照轴号定义
 *						设置总倍率时，任意数，一般为0
 *		rate			倍率(0～2.0)
 *
 * 返回值：参照错误码
 *
 * 备注：调用该函数后，总速度倍率会立即刷新，所以如果变化率过大，会导致速度产生阶跃，
 *		 理想的方式是定时的逐步设定，产生一个加减速的效果；
 *		 当设定倍率值为0时，相当于运动暂停的效果，已下发的运动数据不会被清除。
 ************************************************************************************************/
int adt_set_rate(int type,int axis,double rate);

/************************************************************************************************
 * 功能：获取停止信息
 *
 * 参数：
 * 		axis	范围(1-16), 参照轴号定义
 *		value	停止信息指针(0：无错误停止；非0：有限位、原点或编码器Z相信号触发停止)：
 * 	 				bit0==1 代表 正限位触发停止
 * 					bit1==1 代表 负限位触发停止
 * 					bit2==1 代表 原点信号触发停止
 * 					bit3==1 代表 编码器Z相信号触发停止
 * 					bit4==1 代表 外部急停信号触发停止
 * 					bit5==1 代表 软件正限位触发停止
 * 					bit6==1 代表 软件负限位触发停止
 *
 * 返回值：参照错误码
 *
 * 备注：停止信息也可能组合出现，比如bit0与bit2都为1时代表正限位和原点信号都触发，导致轴停止
 ************************************************************************************************/
int adt_get_stop_data(int axis,int *value);

/************************************************************************************************
 * 功能：设置输出PWM信号
 *
 * 参数：
 * 		port: 1-2
 * 		value:
 * 				ADT-5640输入范围: 0-1000
 * 				AMC-1600输入范围: 0-6817
 *
 * 返回值：参照错误码
 ************************************************************************************************/
int adt_set_pwm(int port,int value);

/************************************************************************************************
 * 功能：设置软件限位模式
 * 		(以脉冲为单位编程)
 *
 * 参数：
 * 		axis			范围(1-16), 参照轴号定义
 * 		EnableFlag      0：无效			1：有效
 * 		Ppos			正方向触发位置,单位为pulse
 * 		Npos			负方向触发位置,单位为pulse
 * 		admode			0：减速停止		1：立即停止
 *
 * 返回值：参照错误码
 *
 * 默认模式为：软件限位无效
 ************************************************************************************************/
int adt_set_softlimit_mode_pulse(int axis,int EnableFlag,long Ppos,long Npos,int admode);

/************************************************************************************************
 * 功能：打开探针功能
 *
 * 参数：
 * 		ProbeNum      	探针号, 范围(1-4)，
 * 							1-2 对应ADT-4640 的 IN22-IN23
 * 							1-4 对应AMC1600    的 IN32-IN35
 * 		ProbeOut		探针触发输出口,
 * 							对应ADT-4640, 范围(1-2), 输出端口为OUT22-OUT23
 * 							对应AMC1600, 范围(1-8), 分别对应脉冲端口的伺服清零输出点, 以及输出端口 OUT22-OUT23
 *
 * 返回值：参照错误码
 *
 * 备注：	当探针功能一旦启用，脉冲端口的伺服清输出点和 OUT22-OUT23，将不受 adt_write_bit() 跟 adt_set_gpio() 控制；
 * 		当探针功能一旦启用，通过 adt_get_out() 跟 adt_get_gpio()获取到的伺服清输出点和 OUT22-OUT23 的IO状态是无效的
 ************************************************************************************************/
int adt_open_probe(int ProbeNum,int ProbeOut);

/************************************************************************************************
 * 功能：打开山洋总线伺服探针功能
 *
 * 参数：
 * 		ProbeNum      	探针号, 范围(1-2), 对应ADT-4640 的 IN22-IN23
 * 		ProbeAxis		探针触发时控制的轴号, 范围(1-16)
 *
 * 返回值：参照错误码
 *
 * 备注：	探针控制的轴号须为山洋总线伺服
 ************************************************************************************************/
int adt_open_SANMOTION_probe(int ProbeNum,int ProbeAxis);

/************************************************************************************************
 * 功能：关闭探针功能
 *
 * 参数：
 * 		无
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_close_probe(void);

/************************************************************************************************
 * 功能：关闭山洋总线伺服探针功能
 *
 * 参数：
 * 		无
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_close_SANMOTION_probe(void);	//清除时,若输入口非零,先将原来轴的偏差置零恢复

/************************************************************************************************
 * 功能：获取探针触发状态
 *
 * 参数：
 * 		ProbeNum		探针号, 范围(1-4)
 * 		ProbeStatus		探针状态指针
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_read_probe_status(int ProbeNum,int *ProbeStatus);

/************************************************************************************************
 * 功能：获取山洋总线伺服探针触发状态
 *
 * 参数：
 * 		ProbeStatus		探针状态指针
 *
 * 返回值：参照错误码
 *
 * 备注：
 ************************************************************************************************/
int adt_read_SANMOTION_probe_status(int *ProbeStatus);

/************************************************************************************************
 * 功能：读EtherCAT从站邮箱功能
 *
 * 参数：
 * 		SlaveNum      	从站节点号(1-32)
 * 		Index			从站邮箱索引号
 * 		SubIndex		从站邮箱子索引号
 * 		pData			数据(指针)
 * 		length			数据占用字节空间， 必须为(1、2、4)
 *
 * 返回值：参照错误码
 *
 * 备注：	该函数一般用于获取QXE邮箱数据
 ************************************************************************************************/
int adt_read_EtherCAT_mailbox(int SlaveNum, int Index, int SubIndex, unsigned char * pData, int length);

/************************************************************************************************
 * 功能：写EtherCAT从站邮箱功能
 *
 * 参数：
 * 		SlaveNum      	从站节点号(1-32)
 * 		Index			从站邮箱索引号
 * 		SubIndex		从站邮箱子索引号
 * 		pData			数据(指针)
 * 		length			数据占用字节空间， 必须为(1、2、4)
 *
 * 返回值：参照错误码
 *
 * 备注：	该函数一般用于对QXE进行参数设置
 ************************************************************************************************/
int adt_write_EtherCAT_mailbox(int SlaveNum, int Index, int SubIndex, unsigned char * pData, int length);

/************************************************************************************************
 * 功  能：保存已修改的QXE参数
 * 参  数：		axis        轴号
 * 返回值：参照错误码
 * 备  注：耗时约3秒
 *************************************************************************************************/
int adt_write_QXE_mailbox_save_parameter(int axis);

/************************************************************************************************
 * 功  能：读取错误码
 * 参  数：		axis        轴号
 *          SubIndex    从站邮箱子索引号
 *          data        需要读写的数据
 * 返回值：参照错误码
 * 备  注：
 *************************************************************************************************/
int adt_read_QXE_mailbox_0x603F(int axis, int SubIndex, unsigned short *data);

/************************************************************************************************
 * 功  能：转矩滤波器开关指令
 * 参  数：		axis        轴号
 *          SubIndex    从站邮箱子索引号
 *          data        需要读写的数据
 * 返回值：参照错误码
 * 备  注：
 *************************************************************************************************/
int adt_write_QXE_mailbox_0x2070(int axis, int SubIndex, unsigned char data);
int adt_read_QXE_mailbox_0x2070(int axis, int SubIndex, unsigned char *data);

/************************************************************************************************
 * 功  能：转矩滤波器类型指令
 * 参  数：		axis        轴号
 *          SubIndex    从站邮箱子索引号
 *          data        需要读写的数据
 * 返回值：参照错误码
 * 备  注：
 *************************************************************************************************/
int adt_write_QXE_mailbox_0x2071(int axis, int SubIndex, unsigned long data);
int adt_read_QXE_mailbox_0x2071(int axis, int SubIndex, unsigned long *data);

/************************************************************************************************
 * 功  能：速度滤波器开关指令
 * 参  数：		axis        轴号
 *          SubIndex    从站邮箱子索引号
 *          data        需要读写的数据
 * 返回值：参照错误码
 * 备  注：
 *************************************************************************************************/
int adt_write_QXE_mailbox_0x2075(int axis, int SubIndex, unsigned char data);
int adt_read_QXE_mailbox_0x2075(int axis, int SubIndex, unsigned char *data);

/************************************************************************************************
 * 功  能：速度滤波器类型指令
 * 参  数：		axis        轴号
 *          SubIndex    从站邮箱子索引号
 *          data        需要读写的数据
 * 返回值：参照错误码
 * 备  注：
 *************************************************************************************************/
int adt_write_QXE_mailbox_0x2076(int axis, int SubIndex, unsigned long data);
int adt_read_QXE_mailbox_0x2076(int axis, int SubIndex, unsigned long *data);

/************************************************************************************************
 * 功  能：计算滤波器
 * 参  数：		axis        轴号
 *          SubIndex    从站邮箱子索引号
 *          data        需要读写的数据
 * 返回值：参照错误码
 * 备  注：
 *************************************************************************************************/
int adt_write_QXE_mailbox_0x2080(int axis, int SubIndex, unsigned char data);
int adt_read_QXE_mailbox_0x2080(int axis, int SubIndex, unsigned char *data);

/************************************************************************************************
 * 功  能：三环调节
 * 参  数：		axis        轴号
 *          SubIndex    从站邮箱子索引号
 *          data        需要读写的数据
 * 返回值：参照错误码
 * 备  注：
 *************************************************************************************************/
int adt_write_QXE_mailbox_0x2090(int axis, int SubIndex, unsigned long data);
int adt_read_QXE_mailbox_0x2090(int axis, int SubIndex, unsigned long *data);

/************************************************************************************************
 * 功  能：DSP FPGA固件版本
 * 参  数：		axis        轴号
 *          SubIndex    从站邮箱子索引号
 *          data        需要读写的数据
 * 返回值：参照错误码
 * 备  注：
 *************************************************************************************************/
int adt_read_QXE_mailbox_0x2001(int axis, int SubIndex, unsigned short *data);

/************************************************************************************************
 * 功  能：极性取反指令
 * 参  数：		axis        轴号
 *          SubIndex    从站邮箱子索引号
 *          data        需要读写的数据
 * 返回值：参照错误码
 * 备  注：
 *************************************************************************************************/
int adt_write_QXE_mailbox_0x607E(int axis, int SubIndex, unsigned char data);
int adt_read_QXE_mailbox_0x607E(int axis, int SubIndex, unsigned char *data);

/************************************************************************************************
 * 功  能：电子此轮比指令
 * 参  数：		axis        轴号
 *          SubIndex    从站邮箱子索引号
 *          data        需要读写的数据
 * 返回值：参照错误码
 * 备  注：
 *************************************************************************************************/
int adt_write_QXE_mailbox_0x6091(int axis, int SubIndex, unsigned long data);
int adt_read_QXE_mailbox_0x6091(int axis, int SubIndex, unsigned long *data);

#endif

