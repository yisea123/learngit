/*
 * ModelArray.cpp
 *
 * Created on: 2018年3月30日下午2:44:15
 * Author: lixingcong
 */

#include "StdAfx.h"
#include "Spring.h"
#include <ModelArray.h>

CModelArray::CModelArray()
{
	// TODO Auto-generated constructor stub
}

CModelArray::~CModelArray()
{
	// TODO Auto-generated destructor stub
}

void CModelArray::add(std::string name,int pic_id, MODEL_PARAM_T* p)
{
	MODEL_T m;
	m.name=name;
	m.picture_id=pic_id;

	while(p->description != std::string()){
		m.params.push_back(*p);
		++p;
	}

	models.push_back(m);
}

CModelArray::MODEL_T* CModelArray::get(size_t index)
{
	if(index >= models.size())
		return nullptr;

	return &models[index];
}

size_t CModelArray::getCount()
{
	return models.size();
}


void CModelArray::loadDefault()
{
	// 塔簧
	MODEL_PARAM_T p1[]={
		{"外径OD1",4,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"OD1位置",20,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"圈数C1",1,-0.001,100.001,"范围(0~100)"},
		{"圈数C2",1,-0.001,100.001,"范围(0~100)"},
		{"节距P",1,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"圈数C3",20,-0.001,100.001,"范围(0~100)"},
		{"圈数C4",1,-0.001,100.001,"范围(0~100)"},
		{"圈数C5",1,-0.001,100.001,"范围(0~100)"},
		{"外径OD2",6,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"OD2位置",20,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"刀进位置",30,-0.001,360.001,"单位:毫米(度).范围(0~360)"},
		{"刀退位置",10,-0.001,360.001,"单位:毫米(度).范围(0~360)"},
		{"单元圈数",5,-0.001,1000.001,"范围(0~1000)"},
		{"节距触位",5,-0.001,999.001,"单位:毫米(度).范围(0~999)"},
		{"节距退位",5,-0.001,999.001,"单位:毫米(度).范围(0~999)"},
		{"尾送线1",15,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"尾送线2",18,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"线径",1,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"节距轴",2,-0.001,6.001,"使用的节距轴号.范围(0~6)"},
		{"切刀轴",3,-0.001,6.001,"使用的切刀轴号.范围(0~6)"},
		{"外径轴",6,-0.001,6.001,"使用的外径轴号.范围(0~6)"},
		{std::string()},
	};

	add("塔簧",IDB_BITMAP_MODEL_1,p1);

	// 直簧
	MODEL_PARAM_T p2[]={
		{"外径OD",4,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"OD位置",20,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"圈数C1",1,-0.001,100.001,"范围(0~100)"},
		{"圈数C2",1,-0.001,100.001,"范围(0~100)"},
		{"节距P",1,-0.001,100.001,"单位:毫米;范围(0~100)"},
		{"圈数C3",20,-0.001,100.001,"范围(0~100)"},
		{"圈数C4",1,-0.001,100.001,"范围(0~100)"},
		{"圈数C5",1,-0.001,100.001,"范围(0~100)"},
		{"刀进位置",30,-0.001,360.001,"单位:毫米(度).范围(0~360)"},
		{"刀退位置",10,-0.001,360.001,"单位:毫米(度).范围(0~360)"},
		{"节距触位",5,-0.001,999.001,"单位:毫米(度).范围(0~999)"},
		{"节距退位",5,-0.001,999.001,"单位:毫米(度).范围(0~999)"},
		{"线径",1,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"节距轴",2,-0.001,6.001,"使用的节距轴号.范围(0~6)"},
		{"切刀轴",3,-0.001,6.001,"使用的切刀轴号.范围(0~6)"},
		{"外径轴",6,-0.001,6.001,"使用的外径轴号.范围(0~6)"},
		{std::string()},
	};

	add("直簧",IDB_BITMAP_MODEL_2,p2);

	// 腰簧
	MODEL_PARAM_T p3[]={
		{"外径OD1",4,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"OD1位置",20,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"圈数C1",1,-0.001,100.001,"范围(0~100)"},
		{"圈数C2",1,-0.001,100.001,"范围(0~100)"},
		{"节距P",1,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"圈数C3",20,-0.001,100.001,"范围(0~100)"},
		{"外径OD2",6,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"OD2位置",20,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"圈数C4",1,-0.001,100.001,"范围(0~100)"},
		{"圈数C5",1,-0.001,100.001,"范围(0~100)"},
		{"圈数C6",1,-0.001,100.001,"范围(0~100)"},
		{"外径OD3",4,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"OD3位置",20,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"刀进位置",30,-0.001,360.001,"单位:毫米(度).范围(0~360)"},
		{"刀退位置",10,-0.001,360.001,"单位:毫米(度).范围(0~360)"},
		{"单元圈数",5,-0.001,1000.001,"范围(0~1000)"},
		{"节距触位",5,-0.001,999.001,"单位:毫米(度).范围(0~999)"},
		{"节距退位",5,-0.001,999.001,"单位:毫米(度).范围(0~999)"},
		{"线径",1,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"节距轴",2,-0.001,6.001,"使用的节距轴号.范围(0~6)"},
		{"切刀轴",3,-0.001,6.001,"使用的切刀轴号.范围(0~6)"},
		{"外径轴",6,-0.001,6.001,"使用的外径轴号.范围(0~6)"},
		{std::string()},
	};

	add("腰簧",IDB_BITMAP_MODEL_3,p3);

	// 通用
	MODEL_PARAM_T p4[]={
		{"外径OD1",4,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"OD1位置",20,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"圈数C1",1,-0.001,100.001,"范围(0~100)"},
		{"节距P1",1,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"外径OD2",4,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"OD2位置",20,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"圈数C2",1,-0.001,100.001,"范围(0~100)"},
		{"节距P2",1,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"外径OD3",4,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"OD3位置",20,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"圈数C3",1,-0.001,100.001,"范围(0~100)"},
		{"节距P3",1,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"外径OD4",4,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"OD4位置",20,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"圈数C4",1,-0.001,100.001,"范围(0~100)"},
		{"节距P4",1,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"外径OD5",4,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"OD5位置",20,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"圈数C5",1,-0.001,100.001,"范围(0~100)"},
		{"节距P5",1,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"外径OD6",4,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"OD6位置",20,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"圈数C6",1,-0.001,100.001,"范围(0~100)"},
		{"节距P6",1,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"外径OD7",4,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"OD7位置",20,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"圈数C7",1,-0.001,100.001,"范围(0~100)"},
		{"节距P7",1,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"外径OD8",4,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"OD8位置",20,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"圈数C8",1,-0.001,100.001,"范围(0~100)"},
		{"节距P8",1,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"外径OD9",4,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"OD9位置",20,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"刀进位置",30,-0.001,360.001,"单位:毫米(度).范围(0~360)"},
		{"刀退位置",10,-0.001,360.001,"单位:毫米(度).范围(0~360)"},
		{"单元圈数",5,-0.001,1000.001,"范围(0~1000)"},
		{"节距触位",5,-0.001,999.001,"单位:毫米(度).范围(0~999)"},
		{"节距退位",5,-0.001,999.001,"单位:毫米(度).范围(0~999)"},
		{"尾送线1",15,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"尾送线2",18,-0.001,999.001,"单位:毫米.范围(0~999)"},
		{"线径",1,-0.001,100.001,"单位:毫米.范围(0~100)"},
		{"节距轴",2,-0.001,6.001,"使用的节距轴号.范围(0~6)"},
		{"切刀轴",3,-0.001,6.001,"使用的切刀轴号.范围(0~6)"},
		{"外径轴",6,-0.001,6.001,"使用的外径轴号.范围(0~6)"},
		{std::string()},
	};

	add("通用",IDB_BITMAP_MODEL_4,p4);

}

void CModelArray::set(size_t index, float* val)
{
	MODEL_T* m=get(index);

	if(nullptr != m){
		for(size_t i=0;i<m->params.size();++i){
			m->params[i].value=static_cast<double>(*(val+i));
		}
	}
}